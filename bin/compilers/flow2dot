#!env python
"""
Compiler : flow2dot 

This is the simple flow to dot compiler wich takes modulename 
and produces dot code.

Need extensions:
    MethodName
"""


import argparse
import sys
import logging

logging.basicConfig(level=logging.DEBUG)

import pyfbml
import pyfbml.dataflow


def main():
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('methodid',help='the fullpath id of the method');

    args = parser.parse_args();

    ext = pyfbml.getExtensions('MethodName');                
    modulename, methodname = args.methodid.rsplit('.',1)

    module = pyfbml.importModule(modulename,ext);
    method = module.getMethod(methodname);
    impl = method.getImpl();
    sys.stdout.write("digraph {\n")
    sys.stdout.write( "  node [shape=record,style=rounded,height=0.1];\n")
    sys.stdout.write('  ' + '\n  '.join(DotVisitor().visit(impl)) + "\n")

    for sid in method.getSinks():
        sink = impl.getSink(sid)
        sys.stdout.write('  OUT_{} [label = "{}"];\n'.format(
                sink.getId(),
                sink.getId()))
        sys.stdout.write('  "{}":sink_{} -> "OUT_{}";\n'.format(
                sink.getFunction().getId(),
                sink.getId(),
                sink.getId()))
    sys.stdout.write("}\n")

class DotVisitor (pyfbml.ControlFlowVisitor):

    def __init__(self):
        super(DotVisitor,self).__init__()
    
    def setup(self,method):
        for sink in method.getSources():
            self.set(sink,['IN_{} [label="{}"];'.format(
                sink.getId(), 
                sink.getId())]
                )

    def apply(self,function):
        in_str = "|".join(["<source_{}>".format(s.getSink().getId()) 
                        for s in function.getSources()]);
        out_str = "|".join(["<sink_{}>".format(s.getId()) 
                        for s in function.getSinks()]);
        function_str= '{} [label="{{{}}}"];'.format(
            function.getId(),
            '{} {} {}'.format(
               '{{{}}} |'.format(in_str) if not in_str is '' else '',
               function['MethodName'],

               '| {{{}}}'.format(out_str) if not out_str is '' else '',
               )
            )
        
        connections = []
        for source in function.getSources():
            sink = source.getSink();
            if not sink.getFunction() is None:
                con = '"{}":sink_{} -> "{}":source_{};'.format(
                        sink.getFunction().getId(),
                        sink.getId(),
                        function.getId(),
                        sink.getId())
            else:
                con = '"IN_{}" -> "{}":source_{};'.format(
                        sink.getId(),
                        function.getId(),
                        sink.getId())

            connections.append(con);

        return self.get(function) + [function_str] + connections

        
if __name__ == "__main__" : main()
