#!env python
"""
.. program:: fbml2dot
.. codeauthor:: Christian Gram Kalhauge <kalhauge@cbs.dtu.dk>


"""
import os
import logging
log = logging.getLogger('fbml2dot')

import fbml
import fbml.core
from fbml.parsers.xmlformat import XMLParser
from fbml.structure import Label


def main(args):
    builder = fbml.get_builder(paths=[os.getcwd()],extensions=['method_name']) 
    method = builder.label_from_string(args.methodid).get()
    if not isinstance(method,fbml.model.Method):
        log.error("%s is not a Method, it's a: %r",args.methodid,method)
        return -1
    method_to_dot(method, sys.stdout)
       
    return 0

def id_(obj): return obj.label.name


def method_to_dot(method, filelike):
    filelike.write("digraph {\n")
    filelike.write( "  node [shape=record,style=rounded,height=0.1];\n")
    filelike.write('  ' + '\n  '.join(DotVisitor().visit(method)) + "\n")

    for sink in method.internal_sinks:
        filelike.write('  OUT_{} [label = "{}"];\n'.format(
                id_(sink),id_(sink)))
        filelike.write('  "{}":{} -> "OUT_{}";\n'.format(
                id_(sink.function),
                id_(sink),id_(sink)))
    filelike.write("}\n")

class DotVisitor (fbml.ControlFlowVisitor):

    def __init__(self):
        super(DotVisitor,self).__init__()
    
    def setup(self,method):
        """
        Setup initializes the list of lines which everythis is appended to
        """
        dotlines = [] 
        return dotlines 

    def final(self,method,dotlines): 
        return dotlines

    def apply(self,function,dotlines):
        
        in_str = "|".join(["<{}>".format(id_(s.sink)) 
                        for s in function.sources]);
        out_str = "|".join(["<{}>".format(id_(s))
                        for s in function.sinks]);
        function_str= '{} [label="{{{}}}"];'.format(
            function.label.name,
            '{} {} {}'.format(
               '{{{}}} |'.format(in_str) if not in_str is '' else '',
               function.ext.method_name,

               '| {{{}}}'.format(out_str) if not out_str is '' else '',
               )
            )
        
        connections = []
        for source in function.sources:
            sink = source.sink;
            con = '"{}":{} -> "{}":{};'.format(
                    id_(sink.function),
                    id_(sink),
                    id_(function),
                    id_(sink)
                )
            connections.append(con);
        dotlines.append(function_str)
        dotlines.extend(connections)

        return dotlines
        
def parse_args():
    import argparse
    parser = argparse.ArgumentParser()
    parser.add_argument('methodid',help='the fullpath id of the method');

    args = parser.parse_args()
    # Post processing of args
    return args

if __name__ == '__main__':
    import sys
    logging.basicConfig(level=logging.INFO)
    sys.exit(main(parse_args()))

