#!python
"""
.. program:: fbml-type
.. codeauthor:: Christian Gram Kalhauge <kalhauge@cbs.dtu.dk>


"""

import os

import fbml
import fbml.extensions.type as typeext

import logging
log = logging.getLogger('fbml-type')

extensions = ['method_name','type'] 

def main(args):
   
    visiter = typeext.TypeSetter(args.module)
    def type_methods(method):
        return visiter.visit(method)

    methods = [type_methods(method) for method in args.module.methods]
   
    fbml.save_module(args.module, args.outfile, extensions)
    return 0

def parse_args():
    import argparse
    parser = argparse.ArgumentParser()
    # Add arguments to parse
    parser.add_argument('-v','--verbose',action='store_true')
    parser.add_argument('-m','--modulename')
    parser.add_argument('-a','--outfile',type=argparse.FileType('w'), default=sys.stdout)
    parser.add_argument('-l','--libs', action='append', default=list())
    parser.add_argument('infile',type=argparse.FileType(), default=None, nargs='?')
    args = parser.parse_args()
    # Post processing of args
    if args.verbose:
        logging.getLogger('fbml').setLevel(logging.DEBUG)
        log.setLevel(logging.DEBUG)
        log.debug("Level is set to DEBUG")

    builder = fbml.get_builder(paths=args.libs + [os.getcwd()],extensions=extensions)
    if not args.infile:
        args.module = builder.label_from_string(args.modulename).get()
    else: 
        args.module = builder.get_module_from_file(args.infile)
    return args

if __name__ == '__main__':
    import sys
    logging.basicConfig(level=logging.INFO)
    sys.exit(main(parse_args()))

